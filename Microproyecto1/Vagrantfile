# -*- mode: ruby -*-
# vi: set ft=ruby :

$install_puppet = <<-PUPPET
sudo apt-get update -y
sudo apt-get install -y puppet
PUPPET

Vagrant.configure("2") do |config|

    if Vagrant.has_plugin? "vagrant-vbguest"
        config.vbguest.no_install  = true
        config.vbguest.auto_update = false
        config.vbguest.no_remote   = true
    end

    config.vm.define :servidor1 do |servidor1|
        servidor1.vm.box = "bento/ubuntu-20.04"
        servidor1.vm.network :private_network, ip: "192.168.100.7"
        servidor1.vm.hostname = "servidor1"
        servidor1.vm.provision "shell", inline: $install_puppet
        servidor1.vm.provision :puppet do |puppet|
            puppet.manifests_path = "puppetNodo1/manifests"
            puppet.manifest_file = "site.pp"
            puppet.module_path = "puppetNodo1/modules"
        end
        servidor1.vm.provision "shell", path: "startServicesNodes.sh", run: 'always'
    end

    config.vm.define :servidor2 do |servidor2|
        servidor2.vm.box = "bento/ubuntu-20.04"
        servidor2.vm.network :private_network, ip: "192.168.100.8"
        servidor2.vm.hostname = "servidor2"
        servidor2.vm.provision "shell", inline: $install_puppet
        servidor2.vm.provision :puppet do |puppet|
            puppet.manifests_path = "puppetNodo2/manifests"
            puppet.manifest_file = "site.pp"
            puppet.module_path = "puppetNodo2/modules"
        end
        servidor2.vm.provision "shell", path: "startServicesNodes.sh", run: 'always'
    end

    config.vm.define :servidorHaProxy do |servidorHaProxy|
        servidorHaProxy.vm.box = "bento/ubuntu-20.04"
        servidorHaProxy.vm.network :private_network, ip: "192.168.100.6"
        servidorHaProxy.vm.hostname = "servidorHaProxy"
        servidorHaProxy.vm.provision "shell", inline: $install_puppet
        servidorHaProxy.vm.provision :puppet do |puppet|
            puppet.manifests_path = "puppetHaproxy/manifests"
            puppet.manifest_file = "site.pp"
            puppet.module_path = "puppetHaproxy/modules"
        end
        servidorHaProxy.vm.provision "shell", path: "startServiceHaproxy.sh", run: 'always'
    end    
end